{"remainingRequest":"/Users/abeerwaseem/Sites/cloudtres-front/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/abeerwaseem/Sites/cloudtres-front/src/views/projects/components/sales_person_projects.vue?vue&type=template&id=0c3bba83&scoped=true&","dependencies":[{"path":"/Users/abeerwaseem/Sites/cloudtres-front/src/views/projects/components/sales_person_projects.vue","mtime":1616140472000},{"path":"/Users/abeerwaseem/Sites/cloudtres-front/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/abeerwaseem/Sites/cloudtres-front/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/abeerwaseem/Sites/cloudtres-front/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/abeerwaseem/Sites/cloudtres-front/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}
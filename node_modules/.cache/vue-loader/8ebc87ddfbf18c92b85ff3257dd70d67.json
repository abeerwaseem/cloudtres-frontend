{"remainingRequest":"/Users/shafimuhammad/Sites/paymentspncworkbench/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/shafimuhammad/Sites/paymentspncworkbench/src/views/dashboard/components/admin_dashboard.vue?vue&type=template&id=6870a520&scoped=true&","dependencies":[{"path":"/Users/shafimuhammad/Sites/paymentspncworkbench/src/views/dashboard/components/admin_dashboard.vue","mtime":1616139755667},{"path":"/Users/shafimuhammad/Sites/paymentspncworkbench/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/shafimuhammad/Sites/paymentspncworkbench/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/shafimuhammad/Sites/paymentspncworkbench/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/shafimuhammad/Sites/paymentspncworkbench/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}
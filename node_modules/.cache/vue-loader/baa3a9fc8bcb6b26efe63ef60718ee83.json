{"remainingRequest":"/Users/shafimuhammad/Sites/payments-pncworkbench/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/shafimuhammad/Sites/payments-pncworkbench/src/views/invoices/children/client_invoice_details.vue?vue&type=template&id=90c3cb86&scoped=true&","dependencies":[{"path":"/Users/shafimuhammad/Sites/payments-pncworkbench/src/views/invoices/children/client_invoice_details.vue","mtime":1611412285226},{"path":"/Users/shafimuhammad/Sites/payments-pncworkbench/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/shafimuhammad/Sites/payments-pncworkbench/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/shafimuhammad/Sites/payments-pncworkbench/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/shafimuhammad/Sites/payments-pncworkbench/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}